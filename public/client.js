// public/client.js - Logique c√¥t√© client pour Complot

// --- Initialisation ---
// Se connecte au serveur Socket.IO qui tourne sur le m√™me h√¥te/port
// La variable 'io' est disponible gr√¢ce au script /socket.io/socket.io.js inclus dans l'HTML
const socket = io();

// R√©cup√©ration des √©l√©ments du DOM (les objets HTML)
const lobbyContainer = document.getElementById('lobby-container');
const playerNameInput = document.getElementById('playerName');
const lobbyNameInput = document.getElementById('lobbyName');
const joinButton = document.getElementById('joinButton');
const messageArea = document.getElementById('message-area');
const gameArea = document.getElementById('game-area'); // La future zone de jeu

// --- Gestion de la Connexion au Lobby ---

// Ajoute un √©couteur d'√©v√©nement sur le clic du bouton "Rejoindre"
joinButton.addEventListener('click', () => {
    // R√©cup√®re les valeurs entr√©es par l'utilisateur
    const playerName = playerNameInput.value.trim(); // .trim() enl√®ve les espaces avant/apr√®s
    const lobbyName = lobbyNameInput.value.trim();

    // Validation simple : v√©rifie que les champs ne sont pas vides
    if (!playerName || !lobbyName) {
        messageArea.textContent = '‚ö†Ô∏è Veuillez entrer un pseudo et un nom de lobby !';
        return; // Arr√™te l'ex√©cution si la validation √©choue
    }

    // Si tout est bon, on efface les anciens messages
    messageArea.textContent = 'Connexion en cours... ‚è≥';
    // On d√©sactive le bouton pour √©viter les clics multiples
    joinButton.disabled = true;
    joinButton.textContent = 'Connexion...';


    // √âmission de l'√©v√©nement 'join_lobby' vers le serveur Node.js
    // On envoie un objet contenant le nom du joueur et le nom du lobby
    socket.emit('join_lobby', { playerName, lobbyName });

    // Note : La suite (cacher le formulaire, afficher le jeu)
    // devrait id√©alement √™tre d√©clench√©e par une r√©ponse du serveur
    // confirmant que le lobby a √©t√© rejoint avec succ√®s.
    // On ajoutera √ßa avec socket.on('lobby_joined', ...)
});

// --- √âcouteurs d'√âv√©nements Socket.IO (√Ä COMPL√âTER) ---

// Se d√©clenche quand la connexion au serveur est √©tablie
socket.on('connect', () => {
    console.log('‚úÖ Connect√© au serveur ! ID:', socket.id);
    // On pourrait r√©activer le bouton si la connexion r√©ussit apr√®s une d√©connexion
    // Mais pour l'instant, on attend l'action de l'utilisateur
});

// Se d√©clenche en cas d'erreur de connexion
socket.on('connect_error', (err) => {
    console.error('Erreur de connexion:', err);
    messageArea.textContent = '‚ùå Impossible de se connecter au serveur. R√©essayez plus tard.';
    joinButton.disabled = false; // R√©active le bouton
    joinButton.textContent = 'Rejoindre le Lobby';
});

// Se d√©clenche lors de la d√©connexion du serveur
socket.on('disconnect', (reason) => {
    console.log('üîå D√©connect√© du serveur:', reason);
    messageArea.textContent = 'üî¥ D√©connect√© du serveur. Veuillez rafra√Æchir la page.';
    // On pourrait vouloir cacher la zone de jeu et r√©afficher le lobby ici
    lobbyContainer.style.display = 'block'; // Ou 'flex' selon le style
    gameArea.style.display = 'none';
    joinButton.disabled = false;
    joinButton.textContent = 'Rejoindre le Lobby';
});

// --- √âv√©nements Sp√©cifiques au Jeu (√Ä AJOUTER PLUS TARD) ---

// Exemple : Le serveur confirme qu'on a rejoint le lobby
socket.on('lobby_joined', (lobbyData) => {
    console.log('üéâ Lobby rejoint avec succ√®s !', lobbyData);
    messageArea.textContent = ''; // Efface les messages d'attente
    lobbyContainer.style.display = 'none'; // Cache le formulaire de lobby
    gameArea.style.display = 'block'; // Affiche la zone de jeu
    // Ici, on initialiserait l'affichage du jeu avec les donn√©es re√ßues (lobbyData)
    // setupGameUI(lobbyData); // Fonction √† cr√©er
});

// Exemple : Le serveur signale une erreur (lobby plein, nom d√©j√† pris...)
socket.on('lobby_error', (errorMessage) => {
    console.error('Erreur de lobby:', errorMessage);
    messageArea.textContent = `‚ùå Erreur : ${errorMessage}`;
    joinButton.disabled = false; // R√©active le bouton
    joinButton.textContent = 'Rejoindre le Lobby';
});

// Exemple : Recevoir la mise √† jour de l'√©tat du jeu
// socket.on('game_update', (gameState) => {
//    console.log('üîÑ Mise √† jour du jeu re√ßue');
//    updateGameUI(gameState); // Fonction √† cr√©er pour mettre √† jour l'interface
// });

// --- Fonctions d'Interface Utilisateur (Exemples √† cr√©er) ---
// function setupGameUI(data) {
//   // Cr√©e les √©l√©ments visuels du jeu (infos joueurs, cartes, boutons...)
// }
// function updateGameUI(state) {
//   // Met √† jour l'affichage avec les nouvelles donn√©es du jeu
// }

