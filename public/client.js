// public/client.js - v2 avec gestion des √©v√©nements du lobby

// --- Initialisation ---
const socket = io();

// R√©cup√©ration des √©l√©ments du DOM
const lobbyContainer = document.getElementById('lobby-container');
const playerNameInput = document.getElementById('playerName');
const lobbyNameInput = document.getElementById('lobbyName');
const joinButton = document.getElementById('joinButton');
const messageArea = document.getElementById('message-area');

const gameArea = document.getElementById('game-area');
const lobbyTitle = document.getElementById('lobby-title'); // Pour afficher le nom du lobby
const playerListUL = document.getElementById('player-list'); // La liste <ul> des joueurs
const hostControlsDiv = document.getElementById('host-controls'); // La div pour les boutons de l'h√¥te
const startButton = document.getElementById('startButton'); // Le bouton pour d√©marrer
const gameContentDiv = document.getElementById('game-content'); // L√† o√π le jeu se passera

// --- Gestion de la Connexion au Lobby ---
joinButton.addEventListener('click', () => {
    const playerName = playerNameInput.value.trim();
    const lobbyName = lobbyNameInput.value.trim();

    if (!playerName || !lobbyName) {
        messageArea.textContent = '‚ö†Ô∏è Veuillez entrer un pseudo et un nom de lobby !';
        return;
    }
    messageArea.textContent = 'Connexion en cours... ‚è≥';
    joinButton.disabled = true;
    joinButton.textContent = 'Connexion...';
    socket.emit('join_lobby', { playerName, lobbyName });
});

// --- √âcouteurs d'√âv√©nements Socket.IO ---

socket.on('connect', () => {
    console.log('‚úÖ Connect√© au serveur ! ID:', socket.id);
    // Si on √©tait en train de tenter de rejoindre, on peut laisser le bouton d√©sactiv√©
    // car la logique 'lobby_joined' ou 'lobby_error' prendra le relais.
});

socket.on('connect_error', (err) => {
    console.error('Erreur de connexion:', err);
    messageArea.textContent = '‚ùå Impossible de se connecter au serveur. R√©essayez plus tard.';
    joinButton.disabled = false;
    joinButton.textContent = 'Rejoindre le Lobby';
});

socket.on('disconnect', (reason) => {
    console.log('üîå D√©connect√© du serveur:', reason);
    // Affiche un message et potentiellement remet l'√©cran de lobby
    lobbyContainer.style.display = 'block'; // Ou 'flex' si c'√©tait le cas
    gameArea.style.display = 'none';
    messageArea.textContent = 'üî¥ D√©connect√© du serveur. Veuillez rafra√Æchir et rejoindre √† nouveau.';
    // Assure que le bouton est r√©activ√© si on revient √† l'√©cran de lobby
    joinButton.disabled = false;
    joinButton.textContent = 'Rejoindre le Lobby';
});

// --- √âv√©nements Sp√©cifiques au Lobby ---

/**
 * G√®re la r√©ception de l'√©v√©nement 'lobby_joined' du serveur.
 * Met √† jour l'interface pour afficher la zone de jeu/lobby.
 * @param {object} lobbyData - Donn√©es du lobby envoy√©es par le serveur.
 * @param {string} lobbyData.lobbyName - Nom du lobby.
 * @param {Array<object>} lobbyData.players - Liste des joueurs ({id, name}).
 * @param {number} lobbyData.maxPlayers - Nombre maximum de joueurs.
 * @param {boolean} lobbyData.isHost - Indique si le joueur actuel est l'h√¥te.
 */
socket.on('lobby_joined', (lobbyData) => {
    console.log('üéâ Lobby rejoint avec succ√®s ! Donn√©es:', lobbyData);
    messageArea.textContent = ''; // Efface les messages d'attente/erreur
    lobbyContainer.style.display = 'none'; // Cache le formulaire de lobby
    gameArea.style.display = 'block'; // Affiche la zone d'attente/jeu

    // Met √† jour le titre avec le nom du lobby
    lobbyTitle.textContent = `Lobby: ${lobbyData.lobbyName}`;

    // Met √† jour la liste des joueurs
    updatePlayerList(lobbyData.players);

    // Affiche le bouton "D√©marrer" si le joueur est l'h√¥te ET qu'il y a assez de joueurs (optionnel, on peut laisser l'h√¥te d√©marrer m√™me seul pour tester)
    // Note: Le serveur devrait id√©alement valider le nombre de joueurs avant de d√©marrer.
    if (lobbyData.isHost) {
        hostControlsDiv.style.display = 'block'; // Affiche la div des contr√¥les
        startButton.disabled = false; // Active le bouton
    } else {
        hostControlsDiv.style.display = 'none'; // Cache les contr√¥les pour les non-h√¥tes
    }

    // On pourrait afficher un message indiquant le nombre de joueurs attendus
    gameContentDiv.innerHTML = `<p>En attente d'autres joueurs (${lobbyData.players.length}/${lobbyData.maxPlayers})...</p>`;
    if (lobbyData.isHost) {
        gameContentDiv.innerHTML += `<p>Vous √™tes l'h√¥te. Cliquez sur "D√©marrer la Partie" quand vous √™tes pr√™ts !</p>`;
    }
});

/**
 * G√®re la r√©ception de l'√©v√©nement 'update_lobby' (un joueur a rejoint ou quitt√©).
 * @param {object} lobbyUpdateData - Donn√©es mises √† jour du lobby.
 * @param {Array<object>} lobbyUpdateData.players - Nouvelle liste des joueurs ({id, name}).
 */
socket.on('update_lobby', (lobbyUpdateData) => {
    console.log('üîÑ Mise √† jour du lobby re√ßue:', lobbyUpdateData);
    // Met simplement √† jour la liste des joueurs affich√©e
    updatePlayerList(lobbyUpdateData.players);

    // Met √† jour le compteur de joueurs (si on est toujours dans la phase d'attente)
    // On v√©rifie si gameContentDiv existe toujours pour √©viter des erreurs si le jeu a commenc√©
    if (gameContentDiv && gameArea.style.display === 'block' && !document.getElementById('game-board')) { // V√©rifie si on est encore en attente
        const maxPlayersText = document.getElementById('lobby-title').textContent.includes('/') ? document.getElementById('lobby-title').textContent.split('/')[1].split(')')[0] : 'N/A'; // Essaye de r√©cup√©rer maxPlayers si dispo
        const currentPlayers = lobbyUpdateData.players.length;
        let waitingMessage = `<p>En attente d'autres joueurs (${currentPlayers}/${maxPlayersText})...</p>`;
         // V√©rifie si l'h√¥te est toujours l√† et si c'est nous (bas√© sur l'ID)
         const amIHost = hostControlsDiv.style.display === 'block'; // Simple check si les contr√¥les sont visibles
         if(amIHost) {
             waitingMessage += `<p>Vous √™tes l'h√¥te. Cliquez sur "D√©marrer la Partie" quand vous √™tes pr√™ts !</p>`;
         }
        gameContentDiv.innerHTML = waitingMessage;
    }
});

/**
 * G√®re la r√©ception d'une erreur du lobby depuis le serveur.
 * @param {string} errorMessage - Le message d'erreur.
 */
socket.on('lobby_error', (errorMessage) => {
    console.error('Erreur de lobby:', errorMessage);
    messageArea.textContent = `‚ùå Erreur : ${errorMessage}`;
    // R√©active le bouton pour que l'utilisateur puisse corriger et r√©essayer
    joinButton.disabled = false;
    joinButton.textContent = 'Rejoindre le Lobby';
});

// --- Gestion du D√©marrage du Jeu (par l'h√¥te) ---
startButton.addEventListener('click', () => {
    console.log('‚ñ∂Ô∏è Demande de d√©marrage de la partie...');
    startButton.disabled = true; // D√©sactive le bouton pour √©viter double clic
    startButton.textContent = 'D√©marrage...';
    // √âv√©nement √† envoyer au serveur pour demander le d√©marrage
    socket.emit('request_start_game');
    // Le serveur r√©pondra (ou non) avec un √©v√©nement 'game_start'
});


// --- √âv√©nements Sp√©cifiques au Jeu (√Ä AJOUTER PLUS TARD) ---

/**
 * G√®re le d√©but de la partie, envoy√© par le serveur.
 * @param {object} initialGameState - L'√©tat initial du jeu (joueurs avec cartes/pi√®ces, tour actuel, etc.)
 */
socket.on('game_start', (initialGameState) => {
    console.log('üöÄ La partie commence ! √âtat initial:', initialGameState);
    hostControlsDiv.style.display = 'none'; // Cache les contr√¥les de l'h√¥te
    gameContentDiv.innerHTML = ''; // Vide la zone d'attente
    // Ici, on appellerait la fonction pour construire l'interface de jeu r√©elle
    // buildGameInterface(initialGameState); // Fonction √† cr√©er
    gameContentDiv.innerHTML = "<h2>La partie a commenc√© !</h2> <p>(Interface de jeu √† construire ici...)</p>"; // Placeholder
});

/**
 * G√®re les mises √† jour de l'√©tat du jeu pendant la partie.
 * @param {object} gameState - Le nouvel √©tat du jeu.
 */
socket.on('game_update', (gameState) => {
   console.log('üîÑ Mise √† jour de l\'√©tat du jeu re√ßue');
   // Ici, on mettrait √† jour l'interface de jeu
   // updateGameInterface(gameState); // Fonction √† cr√©er
});


// --- Fonctions d'Interface Utilisateur ---

/**
 * Met √† jour la liste des joueurs affich√©e dans l'√©l√©ment <ul> #player-list.
 * @param {Array<object>} players - Liste des joueurs ({id, name}).
 */
function updatePlayerList(players) {
    // Vide la liste actuelle
    playerListUL.innerHTML = '';
    // Ajoute chaque joueur comme un √©l√©ment <li>
    players.forEach(player => {
        const li = document.createElement('li');
        // Ajoute une petite ic√¥ne ou distinction si c'est notre propre joueur
        if (player.id === socket.id) {
            li.innerHTML = `üë§ <strong>${player.name} (Vous)</strong>`;
            li.style.fontWeight = 'bold'; // Met en gras notre nom
        } else {
            li.textContent = `üë§ ${player.name}`;
        }
        playerListUL.appendChild(li);
    });
}

// --- Autres fonctions potentielles ---
// function buildGameInterface(state) { ... }
// function updateGameInterface(state) { ... }

